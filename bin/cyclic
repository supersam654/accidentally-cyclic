#!/usr/bin/env node
'use strict'

const fs = require('fs')
const path = require('path')

const ArgumentParser = require('argparse').ArgumentParser

const cyclic = require('../cyclic')
const htmlGenerator = require('../lib/html_generator')

function parseArguments () {
  const parser = new ArgumentParser({
    version: require('../package.json').version,
    addHelp: true,
    description: 'Create internal dependency graph of Node.js project.'
  })

  const actions = parser.addArgumentGroup({title: 'Output'})
  actions.setDefaults({text: true})
  actions.addArgument(
    ['--json'],
    {
      help: 'Output dependencies directly as a JSON array to a file'
    }
  )
  actions.addArgument(
    ['--html'],
    {
      help: 'Output the dependency graph to a self-contained HTML file'
    }
  )
  actions.addArgument(
    ['--text'],
    {
      action: 'storeTrue',
      help: '[DEFAULT] Output dependencies in a human-readable form.'
    }
  )

  parser.addArgument(
    ['-a', '--all'],
    {
      action: 'storeTrue',
      help: 'Include dependencies from node_modules'
    }
  )
  parser.addArgument(
    'mainFile',
    {
      help: 'Entry file of the project to get dependencies for'
    }
  )
  return parser.parseArgs()
}

function main (args) {
  let mainFile = args.mainFile
  // Prepend './' to relative paths that don't already have them.
  // `require` paths need to start with './' if they are relative but system paths do not.
  try {
    fs.accessSync(mainFile)
    // If `accessSync` didn't throw, this is a relative path or an absolute path to a file.
    if (!path.isAbsolute(mainFile)) {
      // Make sure relative paths are formatted correctly for `require`
      mainFile = path.resolve(process.cwd(), mainFile)
    }
  } catch (_) {
    // This must be a core module or third-party module so don't do anything.
  }
  // TODO: Revert chdir change if this ever gets used outside of a CLI.
  const originalCwd = process.cwd()
  process.chdir(path.dirname(mainFile))
  cyclic.require(mainFile, args.all)
  .then(dependencies => {
    process.chdir(originalCwd)

    // Note that you can export as multiple formats if you so please.
    if (args.json) {
      const jsonData = JSON.stringify(dependencies, null, 2)
      fs.writeFileSync(args.json, jsonData)
    }
    if (args.html) {
      const htmlOutput = htmlGenerator.generate(dependencies)
      fs.writeFileSync(args.html, htmlOutput)
    }
    if (args.text) {
      for (let dependency of dependencies) {
        console.log(`${dependency.parent} -> ${dependency.module}`)
      }
    }
  })
  .catch(e => {
    process.chdir(originalCwd)
    console.warn(e)
  })
}

main(parseArguments())
